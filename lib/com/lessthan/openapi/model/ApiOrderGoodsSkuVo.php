<?php
/**
 * ApiOrderGoodsSkuVo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 电商开放平台接口说明--深圳小于科技
 *
 * 小于电商平台开放接口是指每家企业可以拥有一套独立的密钥信息（AppId 与 AppSecret），通过这套密钥信息来调用电商平台公布出来的企业相关的开放接口，比如店铺、商品、订单等数据接口。您可以在 【开放平台】 - 【控制台】 - 【应用管理】 中进行管理，请务必妥善保管。
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: 393341261@qq.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.lessthan.openapi.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiOrderGoodsSkuVo Class Doc Comment
 *
 * @category Class
 * @description 订单商品sku
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiOrderGoodsSkuVo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiOrderGoodsSkuVo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'platform_goods_id' => 'string',
        'item_order_no' => 'string',
        'platform_goods_no' => 'string',
        'product_name' => 'string',
        'sku_id' => 'string',
        'sku_img' => 'string',
        'sku_spec_name' => 'string',
        'sku_sn' => 'string',
        'sku_price' => 'float',
        'sku_quantity' => 'int',
        'sku_total_amount' => 'float',
        'total_amount' => 'float',
        'order_status' => 'string',
        'order_status_value' => 'string',
        'after_sale_id' => 'string',
        'after_sale_status' => 'string',
        'after_sale_status_value' => 'string',
        'other_info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'platform_goods_id' => null,
        'item_order_no' => null,
        'platform_goods_no' => null,
        'product_name' => null,
        'sku_id' => null,
        'sku_img' => null,
        'sku_spec_name' => null,
        'sku_sn' => null,
        'sku_price' => null,
        'sku_quantity' => null,
        'sku_total_amount' => null,
        'total_amount' => null,
        'order_status' => null,
        'order_status_value' => null,
        'after_sale_id' => null,
        'after_sale_status' => null,
        'after_sale_status_value' => null,
        'other_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'platform_goods_id' => false,
		'item_order_no' => false,
		'platform_goods_no' => false,
		'product_name' => false,
		'sku_id' => false,
		'sku_img' => false,
		'sku_spec_name' => false,
		'sku_sn' => false,
		'sku_price' => false,
		'sku_quantity' => false,
		'sku_total_amount' => false,
		'total_amount' => false,
		'order_status' => false,
		'order_status_value' => false,
		'after_sale_id' => false,
		'after_sale_status' => false,
		'after_sale_status_value' => false,
		'other_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'platform_goods_id' => 'platformGoodsId',
        'item_order_no' => 'itemOrderNo',
        'platform_goods_no' => 'platformGoodsNo',
        'product_name' => 'productName',
        'sku_id' => 'skuId',
        'sku_img' => 'skuImg',
        'sku_spec_name' => 'skuSpecName',
        'sku_sn' => 'skuSn',
        'sku_price' => 'skuPrice',
        'sku_quantity' => 'skuQuantity',
        'sku_total_amount' => 'skuTotalAmount',
        'total_amount' => 'totalAmount',
        'order_status' => 'orderStatus',
        'order_status_value' => 'orderStatusValue',
        'after_sale_id' => 'afterSaleId',
        'after_sale_status' => 'afterSaleStatus',
        'after_sale_status_value' => 'afterSaleStatusValue',
        'other_info' => 'otherInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'platform_goods_id' => 'setPlatformGoodsId',
        'item_order_no' => 'setItemOrderNo',
        'platform_goods_no' => 'setPlatformGoodsNo',
        'product_name' => 'setProductName',
        'sku_id' => 'setSkuId',
        'sku_img' => 'setSkuImg',
        'sku_spec_name' => 'setSkuSpecName',
        'sku_sn' => 'setSkuSn',
        'sku_price' => 'setSkuPrice',
        'sku_quantity' => 'setSkuQuantity',
        'sku_total_amount' => 'setSkuTotalAmount',
        'total_amount' => 'setTotalAmount',
        'order_status' => 'setOrderStatus',
        'order_status_value' => 'setOrderStatusValue',
        'after_sale_id' => 'setAfterSaleId',
        'after_sale_status' => 'setAfterSaleStatus',
        'after_sale_status_value' => 'setAfterSaleStatusValue',
        'other_info' => 'setOtherInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'platform_goods_id' => 'getPlatformGoodsId',
        'item_order_no' => 'getItemOrderNo',
        'platform_goods_no' => 'getPlatformGoodsNo',
        'product_name' => 'getProductName',
        'sku_id' => 'getSkuId',
        'sku_img' => 'getSkuImg',
        'sku_spec_name' => 'getSkuSpecName',
        'sku_sn' => 'getSkuSn',
        'sku_price' => 'getSkuPrice',
        'sku_quantity' => 'getSkuQuantity',
        'sku_total_amount' => 'getSkuTotalAmount',
        'total_amount' => 'getTotalAmount',
        'order_status' => 'getOrderStatus',
        'order_status_value' => 'getOrderStatusValue',
        'after_sale_id' => 'getAfterSaleId',
        'after_sale_status' => 'getAfterSaleStatus',
        'after_sale_status_value' => 'getAfterSaleStatusValue',
        'other_info' => 'getOtherInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('platform_goods_id', $data ?? [], null);
        $this->setIfExists('item_order_no', $data ?? [], null);
        $this->setIfExists('platform_goods_no', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('sku_id', $data ?? [], null);
        $this->setIfExists('sku_img', $data ?? [], null);
        $this->setIfExists('sku_spec_name', $data ?? [], null);
        $this->setIfExists('sku_sn', $data ?? [], null);
        $this->setIfExists('sku_price', $data ?? [], null);
        $this->setIfExists('sku_quantity', $data ?? [], null);
        $this->setIfExists('sku_total_amount', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('order_status_value', $data ?? [], null);
        $this->setIfExists('after_sale_id', $data ?? [], null);
        $this->setIfExists('after_sale_status', $data ?? [], null);
        $this->setIfExists('after_sale_status_value', $data ?? [], null);
        $this->setIfExists('other_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets platform_goods_id
     *
     * @return string|null
     */
    public function getPlatformGoodsId()
    {
        return $this->container['platform_goods_id'];
    }

    /**
     * Sets platform_goods_id
     *
     * @param string|null $platform_goods_id 商品ID，唯一值
     *
     * @return self
     */
    public function setPlatformGoodsId($platform_goods_id)
    {
        if (is_null($platform_goods_id)) {
            throw new \InvalidArgumentException('non-nullable platform_goods_id cannot be null');
        }
        $this->container['platform_goods_id'] = $platform_goods_id;

        return $this;
    }

    /**
     * Gets item_order_no
     *
     * @return string|null
     */
    public function getItemOrderNo()
    {
        return $this->container['item_order_no'];
    }

    /**
     * Sets item_order_no
     *
     * @param string|null $item_order_no 子订单编号
     *
     * @return self
     */
    public function setItemOrderNo($item_order_no)
    {
        if (is_null($item_order_no)) {
            throw new \InvalidArgumentException('non-nullable item_order_no cannot be null');
        }
        $this->container['item_order_no'] = $item_order_no;

        return $this;
    }

    /**
     * Gets platform_goods_no
     *
     * @return string|null
     */
    public function getPlatformGoodsNo()
    {
        return $this->container['platform_goods_no'];
    }

    /**
     * Sets platform_goods_no
     *
     * @param string|null $platform_goods_no 平台商品ID
     *
     * @return self
     */
    public function setPlatformGoodsNo($platform_goods_no)
    {
        if (is_null($platform_goods_no)) {
            throw new \InvalidArgumentException('non-nullable platform_goods_no cannot be null');
        }
        $this->container['platform_goods_no'] = $platform_goods_no;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name 商品标题
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets sku_id
     *
     * @return string|null
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param string|null $sku_id 平台规格ID
     *
     * @return self
     */
    public function setSkuId($sku_id)
    {
        if (is_null($sku_id)) {
            throw new \InvalidArgumentException('non-nullable sku_id cannot be null');
        }
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets sku_img
     *
     * @return string|null
     */
    public function getSkuImg()
    {
        return $this->container['sku_img'];
    }

    /**
     * Sets sku_img
     *
     * @param string|null $sku_img 规格图片
     *
     * @return self
     */
    public function setSkuImg($sku_img)
    {
        if (is_null($sku_img)) {
            throw new \InvalidArgumentException('non-nullable sku_img cannot be null');
        }
        $this->container['sku_img'] = $sku_img;

        return $this;
    }

    /**
     * Gets sku_spec_name
     *
     * @return string|null
     */
    public function getSkuSpecName()
    {
        return $this->container['sku_spec_name'];
    }

    /**
     * Sets sku_spec_name
     *
     * @param string|null $sku_spec_name 规格名称
     *
     * @return self
     */
    public function setSkuSpecName($sku_spec_name)
    {
        if (is_null($sku_spec_name)) {
            throw new \InvalidArgumentException('non-nullable sku_spec_name cannot be null');
        }
        $this->container['sku_spec_name'] = $sku_spec_name;

        return $this;
    }

    /**
     * Gets sku_sn
     *
     * @return string|null
     */
    public function getSkuSn()
    {
        return $this->container['sku_sn'];
    }

    /**
     * Sets sku_sn
     *
     * @param string|null $sku_sn 规格编码
     *
     * @return self
     */
    public function setSkuSn($sku_sn)
    {
        if (is_null($sku_sn)) {
            throw new \InvalidArgumentException('non-nullable sku_sn cannot be null');
        }
        $this->container['sku_sn'] = $sku_sn;

        return $this;
    }

    /**
     * Gets sku_price
     *
     * @return float|null
     */
    public function getSkuPrice()
    {
        return $this->container['sku_price'];
    }

    /**
     * Sets sku_price
     *
     * @param float|null $sku_price 规格价格，最多保留4位小数
     *
     * @return self
     */
    public function setSkuPrice($sku_price)
    {
        if (is_null($sku_price)) {
            throw new \InvalidArgumentException('non-nullable sku_price cannot be null');
        }
        $this->container['sku_price'] = $sku_price;

        return $this;
    }

    /**
     * Gets sku_quantity
     *
     * @return int|null
     */
    public function getSkuQuantity()
    {
        return $this->container['sku_quantity'];
    }

    /**
     * Sets sku_quantity
     *
     * @param int|null $sku_quantity 下单规格数量
     *
     * @return self
     */
    public function setSkuQuantity($sku_quantity)
    {
        if (is_null($sku_quantity)) {
            throw new \InvalidArgumentException('non-nullable sku_quantity cannot be null');
        }
        $this->container['sku_quantity'] = $sku_quantity;

        return $this;
    }

    /**
     * Gets sku_total_amount
     *
     * @return float|null
     */
    public function getSkuTotalAmount()
    {
        return $this->container['sku_total_amount'];
    }

    /**
     * Sets sku_total_amount
     *
     * @param float|null $sku_total_amount 规格总金额，最多保留4位小数
     *
     * @return self
     */
    public function setSkuTotalAmount($sku_total_amount)
    {
        if (is_null($sku_total_amount)) {
            throw new \InvalidArgumentException('non-nullable sku_total_amount cannot be null');
        }
        $this->container['sku_total_amount'] = $sku_total_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount 规格实收金额，最多保留4位小数
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status 订单状态，如：已关闭，见【字典数据】
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets order_status_value
     *
     * @return string|null
     */
    public function getOrderStatusValue()
    {
        return $this->container['order_status_value'];
    }

    /**
     * Sets order_status_value
     *
     * @param string|null $order_status_value 订单状态值，如：4，见【字典数据】
     *
     * @return self
     */
    public function setOrderStatusValue($order_status_value)
    {
        if (is_null($order_status_value)) {
            throw new \InvalidArgumentException('non-nullable order_status_value cannot be null');
        }
        $this->container['order_status_value'] = $order_status_value;

        return $this;
    }

    /**
     * Gets after_sale_id
     *
     * @return string|null
     */
    public function getAfterSaleId()
    {
        return $this->container['after_sale_id'];
    }

    /**
     * Sets after_sale_id
     *
     * @param string|null $after_sale_id 售后订单编号
     *
     * @return self
     */
    public function setAfterSaleId($after_sale_id)
    {
        if (is_null($after_sale_id)) {
            throw new \InvalidArgumentException('non-nullable after_sale_id cannot be null');
        }
        $this->container['after_sale_id'] = $after_sale_id;

        return $this;
    }

    /**
     * Gets after_sale_status
     *
     * @return string|null
     */
    public function getAfterSaleStatus()
    {
        return $this->container['after_sale_status'];
    }

    /**
     * Sets after_sale_status
     *
     * @param string|null $after_sale_status 售后状态，如：退款成功，见【字典数据】
     *
     * @return self
     */
    public function setAfterSaleStatus($after_sale_status)
    {
        if (is_null($after_sale_status)) {
            throw new \InvalidArgumentException('non-nullable after_sale_status cannot be null');
        }
        $this->container['after_sale_status'] = $after_sale_status;

        return $this;
    }

    /**
     * Gets after_sale_status_value
     *
     * @return string|null
     */
    public function getAfterSaleStatusValue()
    {
        return $this->container['after_sale_status_value'];
    }

    /**
     * Sets after_sale_status_value
     *
     * @param string|null $after_sale_status_value 售后状态值，如：4，见【字典数据】
     *
     * @return self
     */
    public function setAfterSaleStatusValue($after_sale_status_value)
    {
        if (is_null($after_sale_status_value)) {
            throw new \InvalidArgumentException('non-nullable after_sale_status_value cannot be null');
        }
        $this->container['after_sale_status_value'] = $after_sale_status_value;

        return $this;
    }

    /**
     * Gets other_info
     *
     * @return string|null
     */
    public function getOtherInfo()
    {
        return $this->container['other_info'];
    }

    /**
     * Sets other_info
     *
     * @param string|null $other_info 其他信息JSON字符串，每个平台定制字段，见【字典数据】
     *
     * @return self
     */
    public function setOtherInfo($other_info)
    {
        if (is_null($other_info)) {
            throw new \InvalidArgumentException('non-nullable other_info cannot be null');
        }
        $this->container['other_info'] = $other_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


