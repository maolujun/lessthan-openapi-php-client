<?php
/**
 * ApiGoodsSkuVo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 电商开放平台接口说明--深圳小于科技
 *
 * 小于电商平台开放接口是指每家企业可以拥有一套独立的密钥信息（AppId 与 AppSecret），通过这套密钥信息来调用电商平台公布出来的企业相关的开放接口，比如店铺、商品、订单等数据接口。您可以在 【开放平台】 - 【控制台】 - 【应用管理】 中进行管理，请务必妥善保管。
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: 393341261@qq.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.lessthan.openapi.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiGoodsSkuVo Class Doc Comment
 *
 * @category Class
 * @description 商品sku
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiGoodsSkuVo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiGoodsSkuVo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku_id' => 'string',
        'spec_name' => 'string',
        'sku_img' => 'string',
        'sku_quantity' => 'int',
        'sku_sn' => 'string',
        'sku_price' => 'float',
        'sale_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku_id' => null,
        'spec_name' => null,
        'sku_img' => null,
        'sku_quantity' => null,
        'sku_sn' => null,
        'sku_price' => null,
        'sale_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sku_id' => false,
		'spec_name' => false,
		'sku_img' => false,
		'sku_quantity' => false,
		'sku_sn' => false,
		'sku_price' => false,
		'sale_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku_id' => 'skuId',
        'spec_name' => 'specName',
        'sku_img' => 'skuImg',
        'sku_quantity' => 'skuQuantity',
        'sku_sn' => 'skuSn',
        'sku_price' => 'skuPrice',
        'sale_status' => 'saleStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku_id' => 'setSkuId',
        'spec_name' => 'setSpecName',
        'sku_img' => 'setSkuImg',
        'sku_quantity' => 'setSkuQuantity',
        'sku_sn' => 'setSkuSn',
        'sku_price' => 'setSkuPrice',
        'sale_status' => 'setSaleStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku_id' => 'getSkuId',
        'spec_name' => 'getSpecName',
        'sku_img' => 'getSkuImg',
        'sku_quantity' => 'getSkuQuantity',
        'sku_sn' => 'getSkuSn',
        'sku_price' => 'getSkuPrice',
        'sale_status' => 'getSaleStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sku_id', $data ?? [], null);
        $this->setIfExists('spec_name', $data ?? [], null);
        $this->setIfExists('sku_img', $data ?? [], null);
        $this->setIfExists('sku_quantity', $data ?? [], null);
        $this->setIfExists('sku_sn', $data ?? [], null);
        $this->setIfExists('sku_price', $data ?? [], null);
        $this->setIfExists('sale_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku_id
     *
     * @return string|null
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param string|null $sku_id 平台规格-库存价格ID
     *
     * @return self
     */
    public function setSkuId($sku_id)
    {
        if (is_null($sku_id)) {
            throw new \InvalidArgumentException('non-nullable sku_id cannot be null');
        }
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets spec_name
     *
     * @return string|null
     */
    public function getSpecName()
    {
        return $this->container['spec_name'];
    }

    /**
     * Sets spec_name
     *
     * @param string|null $spec_name 规格SKU名称
     *
     * @return self
     */
    public function setSpecName($spec_name)
    {
        if (is_null($spec_name)) {
            throw new \InvalidArgumentException('non-nullable spec_name cannot be null');
        }
        $this->container['spec_name'] = $spec_name;

        return $this;
    }

    /**
     * Gets sku_img
     *
     * @return string|null
     */
    public function getSkuImg()
    {
        return $this->container['sku_img'];
    }

    /**
     * Sets sku_img
     *
     * @param string|null $sku_img 规格SKU图片
     *
     * @return self
     */
    public function setSkuImg($sku_img)
    {
        if (is_null($sku_img)) {
            throw new \InvalidArgumentException('non-nullable sku_img cannot be null');
        }
        $this->container['sku_img'] = $sku_img;

        return $this;
    }

    /**
     * Gets sku_quantity
     *
     * @return int|null
     */
    public function getSkuQuantity()
    {
        return $this->container['sku_quantity'];
    }

    /**
     * Sets sku_quantity
     *
     * @param int|null $sku_quantity 当前库存数量
     *
     * @return self
     */
    public function setSkuQuantity($sku_quantity)
    {
        if (is_null($sku_quantity)) {
            throw new \InvalidArgumentException('non-nullable sku_quantity cannot be null');
        }
        $this->container['sku_quantity'] = $sku_quantity;

        return $this;
    }

    /**
     * Gets sku_sn
     *
     * @return string|null
     */
    public function getSkuSn()
    {
        return $this->container['sku_sn'];
    }

    /**
     * Sets sku_sn
     *
     * @param string|null $sku_sn 规格SKU编码
     *
     * @return self
     */
    public function setSkuSn($sku_sn)
    {
        if (is_null($sku_sn)) {
            throw new \InvalidArgumentException('non-nullable sku_sn cannot be null');
        }
        $this->container['sku_sn'] = $sku_sn;

        return $this;
    }

    /**
     * Gets sku_price
     *
     * @return float|null
     */
    public function getSkuPrice()
    {
        return $this->container['sku_price'];
    }

    /**
     * Sets sku_price
     *
     * @param float|null $sku_price 价格，最多保留4位小数
     *
     * @return self
     */
    public function setSkuPrice($sku_price)
    {
        if (is_null($sku_price)) {
            throw new \InvalidArgumentException('non-nullable sku_price cannot be null');
        }
        $this->container['sku_price'] = $sku_price;

        return $this;
    }

    /**
     * Gets sale_status
     *
     * @return string|null
     */
    public function getSaleStatus()
    {
        return $this->container['sale_status'];
    }

    /**
     * Sets sale_status
     *
     * @param string|null $sale_status 上架状态，见【字典数据】
     *
     * @return self
     */
    public function setSaleStatus($sale_status)
    {
        if (is_null($sale_status)) {
            throw new \InvalidArgumentException('non-nullable sale_status cannot be null');
        }
        $this->container['sale_status'] = $sale_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


